package org.pastiche.ircd;

import java.io.*;
import javax.xml.parsers.*;
import org.pastiche.ircd.http.ServerConfiguration;
import org.xml.sax.*;
import org.w3c.dom.*;

/*
 *   Pastiche IRCd - Java Internet Relay Chat
 *   Copyright (C) 2001 Charles Miller
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * <p>This class is responsible for starting up the ircd. It is
 * just a main method - it initialises the IrcdConfiguration
 * object. Then it starts up any Listener threads defined in
 * the configuration, and the server is started.
 */
public class Ircd {
public static int port = 6667;
public static String server = "localhost";
public static final String productName = "Pastiche";
public static final String version = "0.5";

public static String getVersion () {
   return productName+"-"+version;
}

public static void main(String[] args) {

	if (args.length == 0) {
		System.out.println ("Please specify the configuration directory");
		System.out.println ("Ircd <configuration directory>");
		System.exit (127);
	}

	File configDir = new File (args[0]);

	if (!configDir.exists()) {
		System.out.println ("The configuraiton directory "+args[0]+" is missing");
		System.exit (127);
	}

	System.out.print("Loading configuration...");
   Document doc = null, serverConfig = null;

   try
      {
      doc = loadDocument (new File (configDir,"config.xml"));
      }
   catch (FileNotFoundException fnf)
      {
	   System.out.println("Configuration file config.xml is missing.");
		System.exit(127);
      }
   catch (SAXParseException spe)
      {
	   System.out.println("Problem parsing configuration file config.xml.");
		System.exit(127);
      }

   if (doc == null)
      {
	   System.out.println("Problem loading configuration file config.xml.");
		System.exit(127);
      }

   try
      {
      serverConfig = loadDocument (new File (configDir,"server.xml"));
      }
   catch (FileNotFoundException fnf)
      {
	   System.out.println("Configuration file server.xml is missing.");
		System.exit(127);
      }
   catch (SAXParseException spe)
      {
	   System.out.println("Problem parsing server configuration file server.xml.");
		System.exit(127);
      }

   if (serverConfig == null)
      {
	   System.out.println("Problem loading configuration file config.xml.");
		System.exit(127);
      }

	try {
      IrcdConfiguration.getInstance().loadCommandConfiguration (doc);
      IrcdConfiguration.getInstance().loadServerConfiguration (configDir, serverConfig);
		IrcdConfiguration.getInstance().checkConfiguration();
	} catch (ConfigurationException ce) {
		System.out.println("failed");
		System.out.println(ce.getMessage());
		System.exit(127);
	}

	System.out.println("done.");
	System.out.println("Starting listeners:");

	for (int i = 0; i < IrcdConfiguration.getInstance().getListeners().length; i++) {
		Listener l = IrcdConfiguration.getInstance().getListeners()[i];
		System.out.print(l + "...");
		new Thread(IrcdConfiguration.getInstance().getListeners()[i], "Connection Listener Port "+IrcdConfiguration.getInstance().getListeners()[i].getPort ()).start();
		System.out.println("done.");
	}

	System.out.println("Starting Http Servers:");
   ServerConfiguration[] httpServers = IrcdConfiguration.getInstance().getHttpServers();
System.out.println ("Number of listeners = "+httpServers.length);
	for (int i = 0; i < httpServers.length; i++) {
      new org.pastiche.ircd.http.Server (IrcdConfiguration.getInstance().getServer(),httpServers[i]).start();
   }
   
}

protected static Document loadDocument (File file) throws FileNotFoundException, SAXParseException
   {
   DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
   Document document = null;

   if (!file.exists ())
      throw new FileNotFoundException (file.getPath());

   try
      {
      DocumentBuilder builder = factory.newDocumentBuilder();

      document = builder.parse (file);
      }
   catch (SAXParseException spe)
      {
     // Error generated by the parser
       System.out.println("\n** Parsing error"
         + ", line " + spe.getLineNumber()
         + ", uri " + spe.getSystemId());
       System.out.println("   " + spe.getMessage() );

       // Use the contained exception, if any
       Exception  x = spe;
       if (spe.getException() != null)
         x = spe.getException();

       x.printStackTrace();
       throw spe;
      }
   catch (SAXException sxe)
      {
       // Error generated during parsing
       Exception  x = sxe;
       if (sxe.getException() != null)
         x = sxe.getException();
       x.printStackTrace();

      }
   catch (ParserConfigurationException pce)
      {
       // Parser with specified options can't be built
       pce.printStackTrace();

      }
   catch (IOException ioe)
      {
       // I/O error
       ioe.printStackTrace();
      }

   return document;
   }
}
